import os
import requests
import random
import time
from github import Github
from datetime import datetime
import zoneinfo


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö http(s) –ø—Ä–æ–∫—Å–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
def fetch_proxy_list():
    url = "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt"
    try:
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()
        proxies = [f"http://{line.strip()}" for line in resp.text.splitlines() if line.strip()]
        print(f"üåê –ü–æ–ª—É—á–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
        return proxies
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏: {e}")
        return []

PROXIES_LIST = fetch_proxy_list()
zone = zoneinfo.ZoneInfo("Europe/Moscow")
thistime = datetime.now(zone)
offset = thistime.strftime("%H:%M | %d.%m.%Y")

GITHUB_TOKEN = os.environ.get("MY_TOKEN")  # GitHub —Ç–æ–∫–µ–Ω
REPO_NAME = "AvenCores/goida-vpn-configs"  # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
if not os.path.exists("githubmirror"):
    os.mkdir("githubmirror")

# –°–ø–∏—Å–æ–∫ URL –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö/—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
URLS = [
    "https://istanbulsydneyhotel.com/blogs/site/sni.php?security=reality", #1
    "https://istanbulsydneyhotel.com/blogs/site/sni.php", #2
    "https://raw.githubusercontent.com/ermaozi/get_subscribe/main/subscribe/v2ray.txt", #3
    "https://raw.githubusercontent.com/acymz/AutoVPN/refs/heads/main/data/V2.txt", #4
    "https://raw.githubusercontent.com/AliDev-ir/FreeVPN/main/pcvpn",  #5
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/V2RAY_RAW.txt",  #6
    "https://raw.githubusercontent.com/Epodonios/v2ray-configs/main/All_Configs_Sub.txt",  #7
    "https://shadowmere.xyz/api/b64sub/",  #8
    "https://vpn.fail/free-proxy/v2ray",   #9
    "https://raw.githubusercontent.com/Proxydaemitelegram/Proxydaemi44/refs/heads/main/Proxydaemi44",  #10
    "https://raw.githubusercontent.com/youfoundamin/V2rayCollector/main/mixed_iran.txt",   #11
    "https://raw.githubusercontent.com/mheidari98/.proxy/refs/heads/main/all",   #12
    "https://github.com/Kwinshadow/TelegramV2rayCollector/raw/refs/heads/main/sublinks/mix.txt",   #13
    "https://github.com/LalatinaHub/Mineral/raw/refs/heads/master/result/nodes",   #14
    "https://github.com/4n0nymou3/multi-proxy-config-fetcher/raw/refs/heads/main/configs/proxy_configs.txt",   #15
    "https://github.com/freefq/free/raw/refs/heads/master/v2",    #16
    "https://github.com/MhdiTaheri/V2rayCollector_Py/raw/refs/heads/main/sub/Mix/mix.txt", #17
    "https://raw.githubusercontent.com/Epodonios/v2ray-configs/refs/heads/main/All_Configs_Sub.txt", #18
    "https://github.com/MhdiTaheri/V2rayCollector/raw/refs/heads/main/sub/mix",   #19
    "https://raw.githubusercontent.com/mehran1404/Sub_Link/refs/heads/main/V2RAY-Sub.txt",  #20
    "https://raw.githubusercontent.com/shabane/kamaji/master/hub/merged.txt",   #21
    "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/main/output/base64/mix-uri",   #22
    "https://raw.githubusercontent.com/V2RAYCONFIGSPOOL/V2RAY_SUB/refs/heads/main/v2ray_configs.txt",  #23
]

REMOTE_PATHS = [f"githubmirror/{i+1}.txt" for i in range(len(URLS))]
LOCAL_PATHS = [f"githubmirror/{i+1}.txt" for i in range(len(URLS))]



def fetch_data(url):
    global PROXIES_LIST
    tries = 0
    max_tries = 5
    while tries < max_tries:
        if not PROXIES_LIST:
            PROXIES_LIST = fetch_proxy_list()
            if not PROXIES_LIST:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–±—É—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                break
        proxy = random.choice(PROXIES_LIST)
        proxies = {
            'http': proxy,
            'https': proxy,
        }
        try:
            response = requests.get(url, proxies=proxies, timeout=15)
            response.raise_for_status()
            return response.text
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            PROXIES_LIST.remove(proxy)
            tries += 1
            time.sleep(1)
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
        return response.text
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        raise


def save_to_local_file(path, content):
    with open(path, "w", encoding="utf-8") as file:
        file.write(content)
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ {path}")


def upload_to_github(local_path, remote_path):
    if not os.path.exists(local_path):
        print(f"‚ùå –§–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    g = Github(GITHUB_TOKEN)
    repo = g.get_repo(REPO_NAME)

    with open(local_path, "r", encoding="utf-8") as file:
        content = file.read()

    try:
        file_in_repo = repo.get_contents(remote_path)
        repo.update_file(
            path=remote_path,
            message=f"üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞: {offset}",
            content=content,
            sha=file_in_repo.sha
        )
        print(f"üöÄ –§–∞–π–ª {remote_path} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.\n")
    except Exception:
        repo.create_file(
            path=remote_path,
            message=f"üÜï –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞: {offset}",
            content=content
        )
        print(f"üÜï –§–∞–π–ª {remote_path} —Å–æ–∑–¥–∞–Ω.\n")


def main():
    for url, local_path, remote_path in zip(URLS, LOCAL_PATHS, REMOTE_PATHS):
        try:
            data = fetch_data(url)
            save_to_local_file(local_path, data)
            upload_to_github(local_path, remote_path)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}\n")


if __name__ == "__main__":
    main()
