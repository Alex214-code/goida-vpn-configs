import os
import urllib.parse
import threading
import re
from collections import defaultdict
import asyncio
import aiohttp
import hashlib
from github import InputGitTreeElement

# -------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï --------------------
# –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ 1 ‚Üí N

LOGS_BY_FILE: dict[int, list[str]] = defaultdict(list)
_LOG_LOCK = threading.Lock()


def _extract_index(msg: str) -> int:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ 'githubmirror/12.txt'.
    –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 (–¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)."""
    m = re.search(r"githubmirror/(\d+)\.txt", msg)
    if m:
        try:
            return int(m.group(1))
        except ValueError:
            pass
    return 0


def log(message: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å –ª–æ–≥–æ–≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ."""
    idx = _extract_index(message)
    with _LOG_LOCK:
        LOGS_BY_FILE[idx].append(message)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞
zone = zoneinfo.ZoneInfo("Europe/Moscow")
thistime = datetime.now(zone)
offset = thistime.strftime("%H:%M | %d.%m.%Y")  # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤

# –ü–æ–ª—É—á–µ–Ω–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GITHUB_TOKEN = os.environ.get("MY_TOKEN")
# –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
REPO_NAME = "AvenCores/goida-vpn-configs"

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Github –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
g = Github(GITHUB_TOKEN)
REPO = g.get_repo(REPO_NAME)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if not os.path.exists("githubmirror"):
    os.mkdir("githubmirror")

# –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
URLS = [
    "https://istanbulsydneyhotel.com/blogs/site/sni.php?security=reality", #1
    "https://istanbulsydneyhotel.com/blogs/site/sni.php", #2
    "https://raw.githubusercontent.com/ermaozi/get_subscribe/main/subscribe/v2ray.txt", #3
    "https://raw.githubusercontent.com/acymz/AutoVPN/refs/heads/main/data/V2.txt", #4
    "https://raw.githubusercontent.com/AliDev-ir/FreeVPN/main/pcvpn", #5
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/V2RAY_RAW.txt", #6
    "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/trojan.txt", #7
    "https://raw.githubusercontent.com/YasserDivaR/pr0xy/main/mycustom1.txt", #8
    "https://vpn.fail/free-proxy/v2ray", #9
    "https://raw.githubusercontent.com/Proxydaemitelegram/Proxydaemi44/refs/heads/main/Proxydaemi44", #10
    "https://raw.githubusercontent.com/youfoundamin/V2rayCollector/main/mixed_iran.txt", #11
    "https://raw.githubusercontent.com/mheidari98/.proxy/refs/heads/main/all", #12
    "https://github.com/Kwinshadow/TelegramV2rayCollector/raw/refs/heads/main/sublinks/mix.txt", #13
    "https://github.com/LalatinaHub/Mineral/raw/refs/heads/master/result/nodes", #14
    "https://github.com/4n0nymou3/multi-proxy-config-fetcher/raw/refs/heads/main/configs/proxy_configs.txt", #15
    "https://github.com/freefq/free/raw/refs/heads/master/v2", #16
    "https://github.com/MhdiTaheri/V2rayCollector_Py/raw/refs/heads/main/sub/Mix/mix.txt", #17
    "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/vmess.txt", #18
    "https://github.com/MhdiTaheri/V2rayCollector/raw/refs/heads/main/sub/mix", #19
    "https://raw.githubusercontent.com/mehran1404/Sub_Link/refs/heads/main/V2RAY-Sub.txt", #20
    "https://raw.githubusercontent.com/shabane/kamaji/master/hub/merged.txt", #21
    "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/main/output/base64/mix-uri", #22
    "https://raw.githubusercontent.com/V2RAYCONFIGSPOOL/V2RAY_SUB/refs/heads/main/v2ray_configs.txt", #23
    "https://raw.githubusercontent.com/STR97/STRUGOV/refs/heads/main/STR.BYPASS#STR.BYPASS%F0%9F%91%BE", #24
]

# –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
REMOTE_PATHS = [f"githubmirror/{i+1}.txt" for i in range(len(URLS))]
LOCAL_PATHS = [f"githubmirror/{i+1}.txt" for i in range(len(URLS))]

# UA Chrome 124 (Windows 10 x64)
CHROME_UA = (
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/138.0.0.0 Safari/537.36"
)

# -------------------- HTTP SESSION & REMOTE CACHE --------------------
try:
    _remote_contents = REPO.get_contents("githubmirror")
    REMOTE_CACHE = {f.path: f for f in _remote_contents}  # path -> ContentFile
except GithubException:
    REMOTE_CACHE = {}


def _git_blob_sha(content: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA1 —Ç–∞–∫ –∂–µ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç git –¥–ª—è blob."""
    data = content.encode("utf-8")
    header = f"blob {len(data)}\0".encode("utf-8")
    return hashlib.sha1(header + data).hexdigest()

# -------------------- ASYNC –ó–ê–ì–†–£–ó–ö–ê --------------------
async def _async_fetch(session: aiohttp.ClientSession, url: str, timeout: int = 10, max_attempts: int = 3) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è fetch_data —Å —Ç—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    for attempt in range(1, max_attempts + 1):
        try:
            modified_url = url
            verify_ssl = attempt == 1  # 1-—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî verify=True
            if attempt == 3:
                parsed = urllib.parse.urlparse(url)
                if parsed.scheme == "https":
                    modified_url = parsed._replace(scheme="http").geturl()
                verify_ssl = False
            elif attempt == 2:
                verify_ssl = False

            async with session.get(modified_url, ssl=verify_ssl, timeout=timeout) as resp:
                resp.raise_for_status()
                return await resp.text()
        except Exception as exc:
            last_exc = exc
            if attempt < max_attempts:
                continue
            raise last_exc

async def _download_all() -> list:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ URL –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)."""
    connector = aiohttp.TCPConnector(limit=64, ssl=False)
    async with aiohttp.ClientSession(connector=connector, headers={"User-Agent": CHROME_UA}) as session:
        tasks = [asyncio.create_task(_async_fetch(session, url)) for url in URLS]
        return await asyncio.gather(*tasks, return_exceptions=True)

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
def save_to_local_file(path, content):
    with open(path, "w", encoding="utf-8") as file:
        file.write(content)
    log(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ {path}")

# -------------------- BATCH COMMIT --------------------

def _batch_commit(changed: dict[str, str]):
    """–ö–æ–º–º–∏—Ç–∏—Ç –≤—Å–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º —á–µ—Ä–µ–∑ GitTrees API."""
    if not changed:
        log("üîÑ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞.")
        return

    elements: list[InputGitTreeElement] = []
    for path, content in changed.items():
        blob = REPO.create_git_blob(content, "utf-8")
        elements.append(InputGitTreeElement(path=path, mode="100644", type="blob", sha=blob.sha))

    # –ë–∞–∑–æ–≤—ã–π –∫–æ–º–º–∏—Ç/–≤–µ—Ç–∫–∞
    branch_name = REPO.default_branch or "main"
    base_commit = REPO.get_branch(branch_name).commit
    base_tree = base_commit.commit.tree

    new_tree = REPO.create_git_tree(elements, base_tree)
    commit_msg = f"üöÄ Batch update {len(changed)} files –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞: {offset}"
    new_commit = REPO.create_git_commit(commit_msg, new_tree, [base_commit])
    REPO.get_git_ref(f"heads/{branch_name}").edit(new_commit.sha)
    log(f"üöÄ –°–æ–∑–¥–∞–Ω batch-–∫–æ–º–º–∏—Ç: {len(changed)} —Ñ–∞–π–ª–æ–≤.")

# -------------------- –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø main --------------------
async def _async_main():
    results = await _download_all()

    changed_files: dict[str, str] = {}

    for idx, result in enumerate(results):
        url = URLS[idx]
        if isinstance(result, Exception):
            short_msg = str(result)
            if len(short_msg) > 200:
                short_msg = short_msg[:200] + "‚Ä¶"
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {short_msg}")
            continue

        content: str = result
        local_path = LOCAL_PATHS[idx]
        remote_path = REMOTE_PATHS[idx]

        save_to_local_file(local_path, content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ SHA, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
        new_sha = _git_blob_sha(content)
        remote_entry = REMOTE_CACHE.get(remote_path)
        if remote_entry and remote_entry.sha == new_sha:
            log(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {remote_path} –Ω–µ—Ç (–ø–æ SHA).")
            continue

        changed_files[remote_path] = content

    _batch_commit(changed_files)

    # ---- –ü–µ—á–∞—Ç—å –ª–æ–≥–æ–≤ ----
    ordered_keys = sorted(k for k in LOGS_BY_FILE.keys() if k != 0)
    output_lines: list[str] = []
    for k in ordered_keys:
        output_lines.append(f"----- {k}.txt -----")
        output_lines.extend(LOGS_BY_FILE[k])
    if LOGS_BY_FILE.get(0):
        output_lines.append("----- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è -----")
        output_lines.extend(LOGS_BY_FILE[0])
    print("\n".join(output_lines))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    asyncio.run(_async_main())
