
import os
import requests
from github import Github
from datetime import datetime
import zoneinfo

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞
zone = zoneinfo.ZoneInfo("Europe/Moscow")
thistime = datetime.now(zone)
offset = thistime.strftime("%H:%M | %d.%m.%Y")  # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤

# –ü–æ–ª—É—á–µ–Ω–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GITHUB_TOKEN = os.environ.get("MY_TOKEN")
# –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
REPO_NAME = "AvenCores/goida-vpn-configs"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if not os.path.exists("githubmirror"):
    os.mkdir("githubmirror")

# –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
URLS = [
    "https://istanbulsydneyhotel.com/blogs/site/sni.php?security=reality", #1
    "https://istanbulsydneyhotel.com/blogs/site/sni.php", #2
    "https://raw.githubusercontent.com/ermaozi/get_subscribe/main/subscribe/v2ray.txt", #3
    "https://raw.githubusercontent.com/acymz/AutoVPN/refs/heads/main/data/V2.txt", #4
    "https://raw.githubusercontent.com/AliDev-ir/FreeVPN/main/pcvpn",  #5
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/V2RAY_RAW.txt",  #6
    "https://github.com/Epodonios/v2ray-configs/raw/main/All_Configs_Sub.txt",  #7
    "https://raw.githubusercontent.com/YasserDivaR/pr0xy/main/mycustom1.txt",  #8
    "https://vpn.fail/free-proxy/v2ray",   #9
    "https://raw.githubusercontent.com/Proxydaemitelegram/Proxydaemi44/refs/heads/main/Proxydaemi44",  #10
    "https://raw.githubusercontent.com/youfoundamin/V2rayCollector/main/mixed_iran.txt",   #11
    "https://raw.githubusercontent.com/mheidari98/.proxy/refs/heads/main/all",   #12
    "https://github.com/Kwinshadow/TelegramV2rayCollector/raw/refs/heads/main/sublinks/mix.txt",   #13
    "https://github.com/LalatinaHub/Mineral/raw/refs/heads/master/result/nodes",   #14
    "https://github.com/4n0nymou3/multi-proxy-config-fetcher/raw/refs/heads/main/configs/proxy_configs.txt",   #15
    "https://github.com/freefq/free/raw/refs/heads/master/v2",    #16
    "https://github.com/MhdiTaheri/V2rayCollector_Py/raw/refs/heads/main/sub/Mix/mix.txt", #17
    "https://raw.githubusercontent.com/Epodonios/v2ray-configs/refs/heads/main/All_Configs_Sub.txt", #18
    "https://github.com/MhdiTaheri/V2rayCollector/raw/refs/heads/main/sub/mix",   #19
    "https://raw.githubusercontent.com/mehran1404/Sub_Link/refs/heads/main/V2RAY-Sub.txt",  #20
    "https://raw.githubusercontent.com/shabane/kamaji/master/hub/merged.txt",   #21
    "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/main/output/base64/mix-uri",   #22
    "https://raw.githubusercontent.com/V2RAYCONFIGSPOOL/V2RAY_SUB/refs/heads/main/v2ray_configs.txt",  #23
]

# –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
REMOTE_PATHS = [f"githubmirror/{i+1}.txt" for i in range(len(URLS))]
LOCAL_PATHS = [f"githubmirror/{i+1}.txt" for i in range(len(URLS))]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ URL
def fetch_data(url):
    response = requests.get(url)
    response.raise_for_status()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return response.text

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
def save_to_local_file(path, content):
    with open(path, "w", encoding="utf-8") as file:
        file.write(content)
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ {path}")

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π)
def upload_to_github(local_path, remote_path):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(local_path):
        print(f"‚ùå –§–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    g = Github(GITHUB_TOKEN)
    repo = g.get_repo(REPO_NAME)

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with open(local_path, "r", encoding="utf-8") as file:
        content = file.read()

    try:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
        file_in_repo = repo.get_contents(remote_path)
        repo.update_file(
            path=remote_path,
            message=f"üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞: {offset}",
            content=content,
            sha=file_in_repo.sha
        )
        print(f"üöÄ –§–∞–π–ª {remote_path} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.\n")
    except Exception:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        repo.create_file(
            path=remote_path,
            message=f"üÜï –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞: {offset}",
            content=content
        )
        print(f"üÜï –§–∞–π–ª {remote_path} —Å–æ–∑–¥–∞–Ω.\n")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏
def main():
    for url, local_path, remote_path in zip(URLS, LOCAL_PATHS, REMOTE_PATHS):
        try:
            data = fetch_data(url)  # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            save_to_local_file(local_path, data)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
            upload_to_github(local_path, remote_path)  # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}\n")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()
